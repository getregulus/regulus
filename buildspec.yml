version: 0.2

phases:
  pre_build:
    commands:
      - echo "Fetching parameters from Parameter Store..."
      - API_URL=$(aws ssm get-parameter --name /regulus/prod/API_URL --with-decryption --query Parameter.Value --output text)
      - DATABASE_URL=$(aws ssm get-parameter --name /regulus/prod/DATABASE_URL --with-decryption --query Parameter.Value --output text)
      - INSTANCE_ID=$(aws ssm get-parameter --name /regulus/prod/INSTANCE_ID --with-decryption --query Parameter.Value --output text)
      - REGION=$(aws ssm get-parameter --name /regulus/prod/REGION --with-decryption --query Parameter.Value --output text)
      - JWT_EXPIRATION=$(aws ssm get-parameter --name /regulus/prod/JWT_EXPIRATION --with-decryption --query Parameter.Value --output text)
      - JWT_SECRET=$(aws ssm get-parameter --name /regulus/prod/JWT_SECRET --with-decryption --query Parameter.Value --output text)
      - LOG_LEVEL=$(aws ssm get-parameter --name /regulus/prod/LOG_LEVEL --with-decryption --query Parameter.Value --output text)
      - NODE_ENV=$(aws ssm get-parameter --name /regulus/prod/NODE_ENV --with-decryption --query Parameter.Value --output text)
      - CORS_ORIGIN=$(aws ssm get-parameter --name /regulus/prod/CORS_ORIGIN --with-decryption --query Parameter.Value --output text)
      - GOOGLE_CLIENT_ID=$(aws ssm get-parameter --name /regulus/prod/GOOGLE_CLIENT_ID --with-decryption --query Parameter.Value --output text)
      - DB_HOST=$(aws ssm get-parameter --name /regulus/prod/DB_HOST --with-decryption --query Parameter.Value --output text)
      - DB_PORT=$(aws ssm get-parameter --name /regulus/prod/DB_PORT --with-decryption --query Parameter.Value --output text)
      - DB_USER=$(aws ssm get-parameter --name /regulus/prod/DB_USER --with-decryption --query Parameter.Value --output text)
      - DB_PASS=$(aws ssm get-parameter --name /regulus/prod/DB_PASS --with-decryption --query Parameter.Value --output text)
      - DB_NAME=$(aws ssm get-parameter --name /regulus/prod/DB_NAME --with-decryption --query Parameter.Value --output text)
      - echo "Fetched parameters successfully!"
      - echo "INSTANCE_ID=$INSTANCE_ID"
      - echo "REGION=$REGION"
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin 841467961522.dkr.ecr.eu-west-1.amazonaws.com

  build:
    commands:
      - echo "Building the Docker image..."
      - docker build --no-cache -t regulus .
      - docker tag regulus:latest 841467961522.dkr.ecr.eu-west-1.amazonaws.com/regulus:latest
      - echo "Docker image built and tagged successfully!"

  post_build:
    commands:
      - echo "Pushing the Docker image to Amazon ECR..."
      - docker push 841467961522.dkr.ecr.eu-west-1.amazonaws.com/regulus:latest
      - echo "Fetching EC2 Public IP..."
      - |
        PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text \
            --region $REGION)
      - echo "Public IP is $PUBLIC_IP"
      - API_URL=http://$PUBLIC_IP:3000
      - echo "API_URL is $API_URL"
      - echo "Deploying the Docker container to EC2 via SSM..."
      - |
        aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy Docker container" \
          --parameters '{"commands":["aws ecr get-login-password --region '$REGION' | docker login --username AWS --password-stdin 841467961522.dkr.ecr.eu-west-1.amazonaws.com",
                                      "docker pull 841467961522.dkr.ecr.eu-west-1.amazonaws.com/regulus:latest",
                                      "docker stop regulus-container || true",
                                      "docker rm regulus-container || true",
                                      "docker run -d --name regulus-container -p 3000:3000 -e API_URL='$API_URL' -e GOOGLE_CLIENT_ID='$GOOGLE_CLIENT_ID' -e DATABASE_URL='$DATABASE_URL' -e DB_HOST='$DB_HOST' -e DB_PORT='$DB_PORT' -e DB_USER='$DB_USER' -e DB_PASS='$DB_PASS' -e DB_NAME='$DB_NAME' -e JWT_EXPIRATION='$JWT_EXPIRATION' -e JWT_SECRET='$JWT_SECRET' -e LOG_LEVEL='$LOG_LEVEL' -e NODE_ENV='$NODE_ENV' -e CORS_ORIGIN='$CORS_ORIGIN' 841467961522.dkr.ecr.eu-west-1.amazonaws.com/regulus:latest"]}' \
          --region $REGION
      - echo "Deployment initiated successfully!"

artifacts:
  files:
    - "**/*"
  discard-paths: yes
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  name            String
  password        String?
  googleId        String?       @unique
  role            String        @default("admin")
  permissions     String        @default("[\"read\",\"write\"]")
  lastLogin       DateTime?
  createdAt       DateTime      @default(now())
  twoFactorEnabled Boolean      @default(false)
  preferences     Preferences?
  plan            Plan?
  auditLogs       AuditLog[]   
  organizations   OrganizationMember[]

  @@map("users")  
}

model Preferences {
  id                 Int      @id @default(autoincrement())
  userId            Int      @unique
  user              User     @relation(fields: [userId], references: [id])
  emailNotifications Boolean  @default(true)

  @@map("preferences")
}

model Plan {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique
  user       User      @relation(fields: [userId], references: [id])
  type       String    @default("free")
  status     String    @default("active")
  expiryDate DateTime?
  features   String    @default("[]")

  @@map("plans")
}

model Transaction {
  id             Int           @id @default(autoincrement())
  transaction_id String        @unique
  user_id        String
  amount         Float
  currency       String
  country        String
  timestamp      DateTime
  flagged        Boolean       @default(false)
  alerts         Alert[]
  organizationId Int
  organization   Organization  @relation(fields: [organizationId], references: [id])

  @@map("transactions")
  @@index([organizationId])
  @@index([timestamp])
}

model Alert {
  id             Int          @id @default(autoincrement())
  transaction_id String
  reason         String
  flagged_at     DateTime     @default(now())
  transaction    Transaction  @relation(fields: [transaction_id], references: [transaction_id])
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("alerts")
  @@index([organizationId])
  @@index([flagged_at])
}

model Watchlist {
  id             Int          @id @default(autoincrement())
  type           String
  value          String
  added_at       DateTime     @default(now())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("watchlist")
}

model Rule {
  id             Int          @id @default(autoincrement())
  rule_name      String
  condition      String
  created_at     DateTime     @default(now())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([rule_name, organizationId])
  @@map("rules")
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  user_id     Int
  action      String
  target_id   Int?
  target_type String?
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id])
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@map("audit_logs")
  @@index([organizationId])
  @@index([timestamp])
}

model Organization {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  members     OrganizationMember[]
  rules       Rule[]
  alerts      Alert[]
  transactions Transaction[]
  watchlist   Watchlist[]
  auditLogs   AuditLog[]
  status      String    @default("active")
  settings    Json?

  @@map("organizations")
}

model OrganizationMember {
  id              Int          @id @default(autoincrement())
  organizationId  Int
  userId          Int
  role            String       @default("member")
  joinedAt        DateTime     @default(now())
  permissions     String       @default("[]")
  status          String       @default("active")
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([userId])
  @@index([organizationId])
  @@map("organization_members")
}